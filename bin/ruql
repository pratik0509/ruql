#!/usr/bin/env ruby

# require 'ruql'
require_relative '../lib/ruql'
require 'getopt/long'

def usage
  name = File.basename $0
  STDERR.puts <<eos
Usage: #{name} filename.rb renderer [options]
filename.rb contains questions expressed in RuQL

renderer choices are:
  Html5    - HTML 5 suitable for Web display/printing
  HtmlForm - HTML forms
  EdXml    - XML for OpenEdX platform in-course questions
  AutoQCM  - LaTeX for use with AutoQCM (http://home.gna.org/auto-qcm)
  JSON     - [partially implemented] JSON format
  Qualtrics -[partially implemented] Qualtrics survey (txt) format

Global options:
  -r <file>, --report=<file>
     Write to <file> a 4-line report of #points, #questions, and first and last
     question#. Especially useful in conjunction with the -a/--start option.
  -a <first>, --start=<first>
      Sets the starting ordinal value (1=first) for question numbering. Default 1.
      If a filename is given, looks for a line of the form "last NN" and
      starts at the number following NN.
  -l <loglevel>, --log=<loglevel>
     In increasing verbosity, they are 'error' (nonfatal), 'warn', 'info',
     'debug'; default is 'warn'
  -p <points>, --points-threshold <points>
     If a question's point value is more than <points> (default: 0), include
     the string "[N points]" at the beginning of the question text.  Make this a
     large number to avoid any points info being printed.
  -P <points-string>, --points-string <points-string>  
     String for formatting the points description prepended to the question text,
     with %d as a placeholder for the point value and %s as a placeholder for
     pluralizing the word 'points' or whatever.  Default is "[%d point%s]".
  -R, --no-randomize
     Present the answer choices in the order they appear in the RuQL file(s),
     even for questions that have :randomize => true.

The EdXML renderer supports these options:
  -n <name>, --name=<name>
      Only render the question(s) that have :name => 'name'.
  NOTE: Some markup that is legal in RuQL questions will break the EdX parser.
     Manually check your questions as you enter them into EdX.  Code seems to
     be particularly troublesome.
  NOTE: The 'points' and 'randomize' attributes of questions are not honored by
     some systems.

  -y <file.yml>, --yaml=<file.yml>
      Render open-assessment questions using info in given Yaml file.

The HTML5 and HTML Forms renderers supports these options:
  -o <type>, --list-type=<type>
      Sets the type of HTML list to use for answer choices: 'u' for unordered
      (<ul>) or 'o' for ordered (<ol>).  Default is 'o'.
  -j <src>, --js=<src>
      embed <src> for JavaScript
  -t <file.html.erb>, --template=<file.html.erb>
      Use file.html.erb as HTML template rather than generating our own file.
      file.html.erb should have <%= yield %> where questions should go.
      The default template in the templates/ directory of RuQL will be used
      if this option is not given.
      The following local variables will be replaced with their values in
      the template:
        <%= quiz.title %> - the quiz title
        <%= quiz.num_questions %> - total number of questions
        <%= quiz.points %> - total number of points for whole quiz
  -s, --solutions
      generate solutions (showing correct answers and explanations)
  NOTE: If there is more than one quiz (collection of questions) in the file,
      a complete <html>...</html> block is produced in the output for EACH quiz.

The AutoQCM renderer supports these options:
  -t <file.tex.erb>, --template=<file.tex.erb>
      MANDATORY: Use file.tex.erb as LaTeX/AutoQCM template.
      The file should have <%= yield %> where questions should go.
      See the description of template under HTML5 renderer for variable
      substitutions that can occur in the quiz body.

The JSON renderer currently supports no options

The Qualtrics renderer supports these options:
  -t <file.txt.erb>, --template=<file.txt.erb>
  The file should have <%= yield %> where questions should go. Since this just creates survey questions, grading information is ignored. Currently supports the same type of questions as the AutoQCM renderer.

eos
  exit
end

def main
  filename = ARGV.shift
  raise "Cannot read #{filename}" unless File.readable? filename
  renderer = ARGV.shift
  raise "Unknown renderer '#{renderer}'" unless Quiz.get_renderer(renderer)

  opts = Getopt::Long.getopts(
    ['-v', '--version', Getopt::BOOLEAN],
    ['-o', '--list-type', Getopt::REQUIRED],
    ['-r', '--report', Getopt::REQUIRED],
    ['-a', '--start', Getopt::REQUIRED],
    ['-c', '--css', Getopt::REQUIRED],
    ['-j', '--js', Getopt::REQUIRED],
    ['-t', '--template', Getopt::REQUIRED],
    ['-s', '--solutions', Getopt::BOOLEAN],
    ['-n', '--name', Getopt::REQUIRED],
    ['-l', '--log', Getopt::REQUIRED],
    ['-P', '--points-string', Getopt::REQUIRED],
    ['-p', '--points-threshold', Getopt::REQUIRED],
    ['-R', '--no-randomize', Getopt::BOOLEAN],
    ['-y', '--yaml', Getopt::REQUIRED]
  )
  Quiz.instance_eval "#{IO.read(filename)}"
  Quiz.quizzes.each { |quiz| puts quiz.render_with(renderer, opts)  }
end

usage if ARGV.length < 2
main
